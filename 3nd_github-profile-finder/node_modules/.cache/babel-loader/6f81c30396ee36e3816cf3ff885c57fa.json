{"ast":null,"code":"var _jsxFileName = \"/Users/Jin/Desktop/projects/SOPT28th_Web/3nd_github-profile-finder/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Card from './components/card'; // import Hello from './components/hello';\n\nimport Search from './components/search';\nimport { getUserData } from './lib/api';\nimport styled from 'styled-components';\nimport GlobalStyle from './common/globalStyle';\nimport Result from './components/result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [userData, setUserData] = useState(null); // const [userId, setUserId] = useState(null);\n\n  const [userState, setUserState] = useState({\n    // 처음에는 data만 저장했지만, status도 함께 저장합니다\n    status: \"idle\",\n    data: null\n  }); // const getUser = async (name) => {\n  //   const data = await getUserData(name);\n  //   setUserData(data); \n  //   // 왜 api 에서 이미 async await 로 불러왔는데 여기서도 async await 를 써야할까?\n  // }\n\n  const getUser = async name => {\n    setUserState({ ...userState,\n      status: \"pending\"\n    }); // 아직 데이터를 불러오기 전이므로 상태를 pending으로 바꿉니다.\n    // ... 는 Spread 연산자로서, 객체의 property를 오버라이딩(업데이트)합니다\n    // status와 같이 이미 존재하는 property값을 수정한 경우, 이를 제외한 나머지 property들(data)이 그대로 반환되며,\n    // 기존에 없던 property를 작성한 경우, 객체에 새로 추가됩니다.\n\n    try {\n      const data = await getUserData(name);\n      if (data === null) throw Error; // API 요청에 실패한 경우에는 data에 null이 반환됩니다\n\n      setUserState({\n        status: \"resolved\",\n        data: data\n      });\n    } catch (e) {\n      setUserState({\n        status: \"rejected\",\n        data: null\n      });\n      console.log(e);\n    }\n  };\n\n  function onSearch(id) {\n    getUser(id);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"title\",\n      children: \"GitHub Profile Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      userState: userState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"d5J7qNaqd5iPCet6JIQXqMlMzzg=\");\n\n_c = App;\nconst Container = styled.section`\n  display:flex;\n  flex-direction: column;\n  align-items:center;\n  justify-content: center;\n  background-color:#349eeb;\n  \n  weight:100%;\n  flex:1;\n  height:100vh;\n\n  .title{\n    color: white;\n    font-size:32px;\n  }\n`;\n_c2 = Container;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["/Users/Jin/Desktop/projects/SOPT28th_Web/3nd_github-profile-finder/src/App.jsx"],"names":["useEffect","useState","Card","Search","getUserData","styled","GlobalStyle","Result","App","userData","setUserData","userState","setUserState","status","data","getUser","name","Error","e","console","log","onSearch","id","Container","section"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,WAAR,QAA0B,WAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,IAAD,CAAxC,CADa,CAEb;;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC;AAAE;AAC3CY,IAAAA,MAAM,EAAE,MADiC;AAEzCC,IAAAA,IAAI,EAAE;AAFmC,GAAD,CAA1C,CAHa,CAQb;AACA;AACA;AACA;AACA;;AACA,QAAMC,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9BJ,IAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgBE,MAAAA,MAAM,EAAE;AAAxB,KAAD,CAAZ,CAD8B,CACqB;AACrD;AACA;AACA;;AACE,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMV,WAAW,CAACY,IAAD,CAA9B;AACA,UAAIF,IAAI,KAAK,IAAb,EAAmB,MAAMG,KAAN,CAFjB,CAE8B;;AAChCL,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAE,UAAV;AAAsBC,QAAAA,IAAI,EAAEA;AAA5B,OAAD,CAAZ;AACD,KAJD,CAIE,OAAOI,CAAP,EAAU;AACVN,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAE,UAAV;AAAsBC,QAAAA,IAAI,EAAE;AAA5B,OAAD,CAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAbD;;AAeA,WAASG,QAAT,CAAkBC,EAAlB,EAAsB;AAEpBP,IAAAA,OAAO,CAACO,EAAD,CAAP;AACD;;AAED,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAED;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA1CQH,G;;KAAAA,G;AA4CT,MAAMe,SAAS,GAAGlB,MAAM,CAACmB,OAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfA;MAAMD,S;AAiBN,eAAef,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport Card from './components/card';\n// import Hello from './components/hello';\nimport Search from './components/search';\nimport {getUserData} from './lib/api'\nimport styled from 'styled-components';\nimport GlobalStyle from './common/globalStyle';\nimport Result from './components/result';\n\n\nfunction App() {\n  const [userData, setUserData] = useState(null);\n  // const [userId, setUserId] = useState(null);\n  const [userState, setUserState] = useState({ // 처음에는 data만 저장했지만, status도 함께 저장합니다\n    status: \"idle\",\n    data: null,\n  });\n\n  // const getUser = async (name) => {\n  //   const data = await getUserData(name);\n  //   setUserData(data); \n  //   // 왜 api 에서 이미 async await 로 불러왔는데 여기서도 async await 를 써야할까?\n  // }\n  const getUser = async (name) => {\n    setUserState({ ...userState, status: \"pending\" }); // 아직 데이터를 불러오기 전이므로 상태를 pending으로 바꿉니다.\n\t\t// ... 는 Spread 연산자로서, 객체의 property를 오버라이딩(업데이트)합니다\n\t\t// status와 같이 이미 존재하는 property값을 수정한 경우, 이를 제외한 나머지 property들(data)이 그대로 반환되며,\n\t\t// 기존에 없던 property를 작성한 경우, 객체에 새로 추가됩니다.\n    try {\n      const data = await getUserData(name);\n      if (data === null) throw Error; // API 요청에 실패한 경우에는 data에 null이 반환됩니다\n      setUserState({ status: \"resolved\", data: data });\n    } catch (e) {\n      setUserState({ status: \"rejected\", data: null });\n      console.log(e);\n    }\n  };\n\n  function onSearch(id) {\n    \n    getUser(id);\n  }\n\n  return (\n    <Container>\n      <GlobalStyle />\n      <p className=\"title\">GitHub Profile Finder</p>\n      <Search onSearch={onSearch}/>\n      <Result userState={userState} />\n      {/* <Card userData ={userData}/> */}\n    </Container>\n  );\n}\n\nconst Container = styled.section`\n  display:flex;\n  flex-direction: column;\n  align-items:center;\n  justify-content: center;\n  background-color:#349eeb;\n  \n  weight:100%;\n  flex:1;\n  height:100vh;\n\n  .title{\n    color: white;\n    font-size:32px;\n  }\n`\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}