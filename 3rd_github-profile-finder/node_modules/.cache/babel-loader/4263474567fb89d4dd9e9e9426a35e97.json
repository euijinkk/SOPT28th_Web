{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _regeneratorRuntime from\"/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject;import{useEffect,useState}from'react';import Card from'./components/card';// import Hello from './components/hello';\nimport Search from'./components/search';import{getUserData}from'./lib/api';import styled from'styled-components';import GlobalStyle from'./common/globalStyle';import Result from'./components/result';import{getUserRepos}from'./lib/repoApi';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// const [userId, setUserId] = useState(null);\nvar _useState=useState({// 처음에는 data만 저장했지만, status도 함께 저장합니다\nstatus:'idle',data:null,repos:null}),_useState2=_slicedToArray(_useState,2),userState=_useState2[0],setUserState=_useState2[1];// const getUser = async (name) => {\n//   const data = await getUserData(name);\n//   setUserData(data);\n//   // 왜 api 에서 이미 async await 로 불러왔는데 여기서도 async await 를 써야할까?\n// }\nvar getUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(name){var data,repos;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setUserState(_objectSpread(_objectSpread({},userState),{},{status:'pending'}));// 아직 데이터를 불러오기 전이므로 상태를 pending으로 바꿉니다.\n// ... 는 Spread 연산자로서, 객체의 property를 오버라이딩(업데이트)합니다\n// status와 같이 이미 존재하는 property값을 수정한 경우, 이를 제외한 나머지 property들(data)이 그대로 반환되며,\n// 기존에 없던 property를 작성한 경우, 객체에 새로 추가됩니다.\n_context.prev=1;_context.next=4;return getUserData(name);case 4:data=_context.sent;_context.next=7;return getUserRepos(name);case 7:repos=_context.sent;if(!(data===null)){_context.next=10;break;}throw Error;case 10:// API 요청에 실패한 경우에는 data에 null이 반환됩니다\nsetUserState({status:'resolved',data:data,repos:repos});_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](1);setUserState({status:'rejected',data:null,repos:null});console.log(_context.t0);case 17:case\"end\":return _context.stop();}}},_callee,null,[[1,13]]);}));return function getUser(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsx(\"p\",{className:\"title\",children:\"GitHub Profile Finder\"}),/*#__PURE__*/_jsx(Search,{getUser:getUser}),/*#__PURE__*/_jsx(Result,{userState:userState,setUserState:setUserState})]});}var Container=styled.section(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    background-color: #349eeb;\\n    width: 100%;\\n    flex: 1;\\n    height: 100%;\\n\\n    .title {\\n        color: white;\\n        font-size: 32px;\\n    }\\n\"])));export default App;","map":{"version":3,"sources":["/Users/Jin/Desktop/projects/SOPT28th_Web/3rd_github-profile-finder/src/App.jsx"],"names":["useEffect","useState","Card","Search","getUserData","styled","GlobalStyle","Result","getUserRepos","App","status","data","repos","userState","setUserState","getUser","name","Error","console","log","Container","section"],"mappings":"67BAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA;AACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,WAAT,KAA4B,WAA5B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,OAASC,YAAT,KAA6B,eAA7B,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACX;AADW,cAGuBR,QAAQ,CAAC,CACvC;AACAS,MAAM,CAAE,MAF+B,CAGvCC,IAAI,CAAE,IAHiC,CAIvCC,KAAK,CAAE,IAJgC,CAAD,CAH/B,wCAGJC,SAHI,eAGOC,YAHP,eAUX;AACA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,OAAO,0FAAG,iBAAOC,IAAP,iIACZF,YAAY,gCAAMD,SAAN,MAAiBH,MAAM,CAAE,SAAzB,GAAZ,CAAmD;AACnD;AACA;AACA;AAJY,sCAMWN,CAAAA,WAAW,CAACY,IAAD,CANtB,QAMFL,IANE,qCAOYH,CAAAA,YAAY,CAACQ,IAAD,CAPxB,QAOFJ,KAPE,oBASJD,IAAI,GAAK,IATL,gCASiBM,CAAAA,KATjB,SASwB;AAEhCH,YAAY,CAAC,CAAEJ,MAAM,CAAE,UAAV,CAAsBC,IAAI,CAAEA,IAA5B,CAAkCC,KAAK,CAAEA,KAAzC,CAAD,CAAZ,CAXQ,iFAaRE,YAAY,CAAC,CAAEJ,MAAM,CAAE,UAAV,CAAsBC,IAAI,CAAE,IAA5B,CAAkCC,KAAK,CAAE,IAAzC,CAAD,CAAZ,CACAM,OAAO,CAACC,GAAR,cAdQ,qEAAH,kBAAPJ,CAAAA,OAAO,4CAAb,CAkBA,mBACI,MAAC,SAAD,yBACI,KAAC,WAAD,IADJ,cAEI,UAAG,SAAS,CAAC,OAAb,mCAFJ,cAGI,KAAC,MAAD,EAAQ,OAAO,CAAEA,OAAjB,EAHJ,cAII,KAAC,MAAD,EAAQ,SAAS,CAAEF,SAAnB,CAA8B,YAAY,CAAEC,YAA5C,EAJJ,GADJ,CASH,CAED,GAAMM,CAAAA,SAAS,CAAGf,MAAM,CAACgB,OAAV,uUAAf,CAgBA,cAAeZ,CAAAA,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport Card from './components/card';\n// import Hello from './components/hello';\nimport Search from './components/search';\nimport { getUserData } from './lib/api';\nimport styled from 'styled-components';\nimport GlobalStyle from './common/globalStyle';\nimport Result from './components/result';\nimport { getUserRepos } from './lib/repoApi';\n\nfunction App() {\n    // const [userId, setUserId] = useState(null);\n\n    const [userState, setUserState] = useState({\n        // 처음에는 data만 저장했지만, status도 함께 저장합니다\n        status: 'idle',\n        data: null,\n        repos: null,\n    });\n\n    // const getUser = async (name) => {\n    //   const data = await getUserData(name);\n    //   setUserData(data);\n    //   // 왜 api 에서 이미 async await 로 불러왔는데 여기서도 async await 를 써야할까?\n    // }\n    const getUser = async (name) => {\n        setUserState({ ...userState, status: 'pending' }); // 아직 데이터를 불러오기 전이므로 상태를 pending으로 바꿉니다.\n        // ... 는 Spread 연산자로서, 객체의 property를 오버라이딩(업데이트)합니다\n        // status와 같이 이미 존재하는 property값을 수정한 경우, 이를 제외한 나머지 property들(data)이 그대로 반환되며,\n        // 기존에 없던 property를 작성한 경우, 객체에 새로 추가됩니다.\n        try {\n            const data = await getUserData(name);\n            const repos = await getUserRepos(name);\n\n            if (data === null) throw Error; // API 요청에 실패한 경우에는 data에 null이 반환됩니다\n\n            setUserState({ status: 'resolved', data: data, repos: repos });\n        } catch (e) {\n            setUserState({ status: 'rejected', data: null, repos: null });\n            console.log(e);\n        }\n    };\n\n    return (\n        <Container>\n            <GlobalStyle />\n            <p className=\"title\">GitHub Profile Finder</p>\n            <Search getUser={getUser} />\n            <Result userState={userState} setUserState={setUserState} />\n            {/* <Card userData ={userData}/> */}\n        </Container>\n    );\n}\n\nconst Container = styled.section`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background-color: #349eeb;\n    width: 100%;\n    flex: 1;\n    height: 100%;\n\n    .title {\n        color: white;\n        font-size: 32px;\n    }\n`;\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}